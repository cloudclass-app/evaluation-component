// <auto-generated />
using System;
using Evaluations.Api.Data;
using Evaluations.Api.Data.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Evaluations.Api.Data.Migrations
{
    [DbContext(typeof(EvaluationContext))]
    partial class EvaluationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "course_member_role", new[] { "student", "teacher" })
                .HasPostgresEnum(null, "evaluation_kind", new[] { "task", "test" })
                .HasPostgresEnum(null, "evaluation_part_kind", new[] { "bool", "letter", "numeric" })
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.1.20451.13");

            modelBuilder.Entity("Evaluations.Api.Data.Model.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid[]>("Members")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Organization")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Organization");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.CourseMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Begin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Organization")
                        .HasColumnType("uuid");

                    b.Property<CourseMemberRole>("Role")
                        .HasColumnType("course_member_role");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Organization");

                    b.ToTable("CourseMember");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<EvaluationKind>("Kind")
                        .HasColumnType("evaluation_kind");

                    b.Property<Guid>("Organization")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("Organization");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.EvaluationPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EvaluationId")
                        .HasColumnType("uuid");

                    b.Property<EvaluationPartKind>("Kind")
                        .HasColumnType("evaluation_part_kind");

                    b.Property<string>("MaxScore")
                        .HasColumnType("text");

                    b.Property<Guid>("Organization")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId");

                    b.HasIndex("Organization");

                    b.ToTable("EvaluationPart");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.EvaluationPartResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Organization")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Score")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Organization");

                    b.HasIndex("PartId");

                    b.ToTable("EvaluationPartResult");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.CourseMember", b =>
                {
                    b.HasOne("Evaluations.Api.Data.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.Evaluation", b =>
                {
                    b.HasOne("Evaluations.Api.Data.Model.Course", "Course")
                        .WithMany("Evaluations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.EvaluationPart", b =>
                {
                    b.HasOne("Evaluations.Api.Data.Model.Evaluation", "Evaluation")
                        .WithMany("Parts")
                        .HasForeignKey("EvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluation");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.EvaluationPartResult", b =>
                {
                    b.HasOne("Evaluations.Api.Data.Model.EvaluationPart", "Part")
                        .WithMany("MyProperty")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.Course", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.Evaluation", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("Evaluations.Api.Data.Model.EvaluationPart", b =>
                {
                    b.Navigation("MyProperty");
                });
#pragma warning restore 612, 618
        }
    }
}
